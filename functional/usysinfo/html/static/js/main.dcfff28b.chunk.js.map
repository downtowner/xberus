{"version":3,"sources":["utils/baseUrl.js","utils/tools.js","store/actions.js","store/actionTypes.js","store/reducer.js","store/index.js","utils/request.js","services/index.js","components/Charts/index.js","pages/DashBoard/index.js","pages/SystemInfo/index.js","utils/withAliveComponent.js","pages/layout/index.js","App.js","serviceWorker.js","index.js"],"names":["proxyTargetMap","prod","window","location","pathname","xiaobing","zhipeng","senfeng","baseUrl","process","REACT_APP_API_TYPE","Option","SubMenu","Item","getLocal","item","localStorage","getItem","getActions","createActions","id","title","description","flag","permissionList","currentList","reducer","handleActions","state","action","bookList","payload","filter","loginVisible","dropVisilve","newState","JSON","parse","stringify","list","inputValue","enhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","store","createStore","service","axios","create","baseURL","timeout","withCredentials","interceptors","request","use","config","headers","Authorization","data","loading","params","document","getElementById","style","display","err","console","log","Promise","reject","response","res","code","error","msg","status","removeItem","dropAction","changeDrop","dispatch","changeLogin","message","getSystemInfo","url","method","result","postSystemInfo","field","publish","RangePicker","Page","props","change","date","dateString","length","getOneList","name","handleChange","value","setTime","dateFormat","now","Date","getTime","before","nowTime","moment","format","beforeTime","refs","form","setFieldsValue","time","label","noUpdate","this","nextProps","nextState","rate","hasRate","showTitle","height","xField","yField","seriesField","point","size","shape","appendPadding","yAxis","formatter","xAxis","tickCount","legend","visible","responsive","renderer","className","ref","layout","defaultValue","onChange","showTime","placeholder","Component","Index","getData","a","setState","type","obj","startdate","enddate","newData","Object","assign","cpu","disk","goruntime","memory","network","systemInfo","io","centered","onOk","changeVisible","onCancel","width","okText","cancelText","bordered","map","key","React","withAliveComponent","Header","Content","Footer","MainLayout","Sider","prop","GetCurrentPageHeaderTitle","GetCurrentPageHeaderSubTitle","GetButton","onClick","CurrentMenuSelectKey","backIcon","subTitle","extra","textAlign","withRouter","App","Root","basename","path","component","Boolean","hostname","match","Main","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.dcfff28b.chunk.js","sourcesContent":["const proxyTargetMap = {\r\n    prod:window.location.pathname,\r\n    // prod: window.location.href,\r\n    xiaobing: '/xiaobing',\r\n    zhipeng: '/zhipeng',\r\n    senfeng: '/senfeng',\r\n}\r\nconst API_TYPE = process.env.REACT_APP_API_TYPE?process.env.REACT_APP_API_TYPE:'xiaobing'\r\nconst baseUrl = process.env.NODE_ENV === 'production' ? proxyTargetMap.prod : proxyTargetMap[API_TYPE]\r\nexport default baseUrl","import React from \"react\"\r\nimport { Menu, Breadcrumb, Select } from \"antd\"\r\nimport { Link ,Route} from \"react-router-dom\"\r\nimport request from './request'\r\nimport {\r\n    // DownloadOutlined,\r\n    AuditOutlined,\r\n    AppstoreAddOutlined,\r\n    ContactsOutlined,\r\n    ControlOutlined,\r\n    FormOutlined,\r\n    FileTextOutlined,\r\n    StopOutlined,\r\n    HighlightOutlined,\r\n    ProfileOutlined,\r\n    TeamOutlined,\r\n    // TagsOutlined,\r\n    CopyOutlined,\r\n    CheckCircleOutlined,\r\n    ExclamationCircleOutlined,\r\n    BlockOutlined\r\n} from '@ant-design/icons'\r\nconst Option = Select.Option\r\nconst { SubMenu } = Menu\r\nconst MenuItem = Menu.Item\r\n\r\n\r\n/**\r\n *\r\n * @param  {Array} userRouter 后台返回的用户权限json\r\n * @param  {Array} allRouter  前端配置好的所有动态路由的集合\r\n * @return {Array} realRoutes 过滤后的路由\r\n */\r\n\r\n //根据后台数据筛选出路由表\r\n export function recursionRouter(userRouter = [], allRouter = []) {\r\n    const realRoutes = allRouter\r\n        .filter(item => userRouter.includes(item.path))\r\n        .map(item => ({\r\n            ...item,\r\n            children: item.children\r\n                ? recursionRouter(userRouter, item.children)\r\n                : null\r\n        }))\r\n    return realRoutes\r\n}\r\n\r\n//获取route\r\nexport function getRoutes(permissionList){\r\n    let list = []\r\n    function getList(arr){\r\n        arr.forEach(item=>{\r\n            if(item.children && item.children.length>0){\r\n                getList(item.children)\r\n            }else{\r\n                list.push(item)\r\n            }\r\n        })\r\n    }\r\n    getList(permissionList)\r\n    return list.map(item =>{\r\n        return <Route key={item.key} path={item.path} component={item.component} />\r\n    })\r\n}\r\n\r\n// 获取Icon\r\nexport const getIcon = string => {\r\n    return {\r\n        AuditOutlined:<AuditOutlined/>,\r\n        AppstoreAddOutlined:<AppstoreAddOutlined/>,\r\n        ContactsOutlined:<ContactsOutlined />,\r\n        ControlOutlined:<ControlOutlined/>,\r\n        FormOutlined:<FormOutlined/>,\r\n        FileTextOutlined:<FileTextOutlined/>,\r\n        HighlightOutlined:<HighlightOutlined/>,\r\n        ProfileOutlined:<ProfileOutlined/>,\r\n        TeamOutlined:<TeamOutlined/>,\r\n        TagsOutlined:<TeamOutlined/>,\r\n        CopyOutlined:<CopyOutlined/>,\r\n        CheckCircleOutlined:<CheckCircleOutlined/>,\r\n        ExclamationCircleOutlined:<ExclamationCircleOutlined/>,\r\n        BlockOutlined:<BlockOutlined/>,\r\n        StopOutlined:<StopOutlined />\r\n    }[string]\r\n}\r\n\r\n//获取侧边栏Item\r\nexport const getMenuItem = list => {\r\n    return list.map((item, index) => {\r\n        if (item.children && item.children.length > 0) {\r\n            return (\r\n                <SubMenu\r\n                    key={item.key}\r\n                    title={item.name}\r\n                    icon={getIcon(item.icon)}\r\n                >\r\n                    {getMenuItem(item.children)}\r\n                </SubMenu>\r\n            )\r\n        } else {\r\n            return (\r\n                <MenuItem key={item.key} icon={getIcon(item.icon)}>\r\n                    {item.name}\r\n                </MenuItem>\r\n            )\r\n        }\r\n    })\r\n}\r\n//获取面包屑Item\r\nexport const getBreadItem = (list) => {\r\n    const arr = [];\r\n    function getItem(allList) {\r\n        allList.forEach((item, index) => {\r\n            if (item.children && item.children.length > 0) {\r\n                arr.push(\r\n                    <Breadcrumb.Item key={index}>\r\n                        <Link to={item.redirect}>\r\n                            {item.name}\r\n                        </Link>\r\n                    </Breadcrumb.Item>\r\n                )\r\n                getItem(item.children)\r\n\r\n            } else {\r\n                arr.push(\r\n                    <Breadcrumb.Item key={index}>\r\n                        <Link to={item.path}>\r\n                            {item.name}\r\n                        </Link>\r\n                    </Breadcrumb.Item>\r\n                )\r\n            }\r\n\r\n        })\r\n    }\r\n    getItem(list)\r\n    return arr\r\n}\r\n\r\n//获取多数组扁平化\r\nexport const getAllItem = arr => {\r\n    let list = []\r\n    function fn(arr){\r\n        arr.forEach(item =>{\r\n            if(item.children && item.children.length>0){\r\n                fn(item.children)\r\n            }\r\n            list.push(item)\r\n        })\r\n    }\r\n    fn(arr)\r\n    return list\r\n}\r\n\r\n//左侧栏默认展开项\r\nexport const filterRoutes = pathname => {\r\n    let pathSnippets = pathname.split('/').filter(path => path)\r\n    let paths = pathSnippets.map((path, index) => `/${pathSnippets.slice(0, index + 1).join('/')}`)\r\n    paths.splice(0, 1)\r\n    return paths\r\n}\r\n\r\n//获取options\r\nexport const getOptionsList = data => {\r\n    if (!(data instanceof Array)) {\r\n        return []\r\n    };\r\n    return data.map((item, index) => {\r\n        return <Option key={item.id} value={item.value}>{item.label}</Option>\r\n    })\r\n}\r\n\r\n//获取分页关键内容\r\nexport const pagination = (data, callback) => {\r\n    return {\r\n        // current: data.page,\r\n        pageSize: data.pagesize,\r\n        total: data.total,\r\n        showQuickJumper: false,\r\n        onChange: (current) => {\r\n            callback(current)\r\n        },\r\n        showTotal: () => {\r\n            return `共${data.total}条`\r\n        }\r\n    }\r\n}\r\n\r\n//初始列表\r\nexport const getList = (_this, options) => {\r\n    request(options)\r\n    .then(res =>{\r\n        if(res && res.data && res.data.list){\r\n            // res.data.page += 1\r\n            let dataSource = res.data.list.map((item, index) => {\r\n                item.key = index;\r\n                return item;\r\n            });\r\n            _this.setState({\r\n                dataSource,\r\n                pagination: pagination(res.data, (current) => {\r\n                    _this.params.page = current;\r\n                    _this.requestList();\r\n                })\r\n            })\r\n        }\r\n    })\r\n}\r\n\r\n//设置勾选后的内容\r\n/**\r\n * @param {*选中行的索引} selectedRowKeys Array\r\n * @param {*选中行对象} selectedItem Array\r\n */\r\nexport const updateSelectedItem = (selectedRowKeys, selectedRows, that) => {\r\n    const rowSelection = {\r\n        selectedRowKeys, selectedRows\r\n    }\r\n    that.setState({\r\n        rowSelection\r\n    })\r\n}\r\n\r\n//获取localstorage\r\nexport const getLocal = item => {\r\n    return localStorage.getItem(item)\r\n}\r\n\r\n//设置localstorage\r\nexport const setLocal = (key, value) => {\r\n    localStorage.setItem(key, value)\r\n}\r\n\r\n//移除\r\nexport const removeLocal = (key) => {\r\n    localStorage.removeItem(key)\r\n}\r\n\r\n//时间戳转换\r\nexport const formateDate = time => {\r\n    if (!time) return '';\r\n    let date = new Date(time);\r\n    return date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate() + ' ' + date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds();\r\n}\r\n\r\n//需要登陆的校验\r\nexport const needLogin = (props) => {\r\n    let username = localStorage.getItem('username')\r\n    if (!username) {\r\n        let { dispatch, getActions } = props\r\n        const action = getActions.changeLogin(true)\r\n        dispatch(action)\r\n        return false\r\n    }\r\n    return true\r\n}","import { createActions } from 'redux-actions'\r\nimport { BOOK_LIST_GET, BOOK_LIST_DELETE ,CHANGE_LOGIN,CHANGE_DROP,PERMISSION_CHANGE} from './actionTypes'\r\nimport request from '@/utils/request'\r\nimport { recursionRouter ,getAllItem} from '@/utils/tools'\r\nimport router from '@/router'\r\nexport const getActions = createActions({\r\n    [BOOK_LIST_GET]: () => {\r\n        const bookList = [\r\n            {\r\n                id: '1',\r\n                title: '111',\r\n                description: '111'\r\n            }\r\n        ]\r\n        return bookList\r\n    },\r\n    [BOOK_LIST_DELETE]: (id) => {\r\n        return { id }\r\n    },\r\n    [CHANGE_LOGIN]: (flag) => {\r\n        return { flag }\r\n    },\r\n    [CHANGE_DROP]: (flag) => {\r\n        return { flag }\r\n    },\r\n    [PERMISSION_CHANGE]:(permissionList,currentList) => {\r\n        return {\r\n            permissionList,\r\n            // currentList\r\n        }\r\n    }\r\n})\r\n\r\nexport const doActionTest = (id) => {\r\n    return (dispatch) => {\r\n        setTimeout(() => {\r\n            const action = getActions.bookListDelete(id)\r\n            dispatch(action)\r\n        }, 3000)\r\n\r\n    }\r\n}\r\n\r\nexport const permissionAction = (path) =>{\r\n    return (dispatch) =>{\r\n        request({\r\n            url:'/v1/personal/menu',\r\n            method:'get'\r\n        }).then(res => {\r\n            if(res.code === 200){\r\n                let list = getAllItem(res.data).map(item =>item.menu_path)\r\n                const permissionList = recursionRouter(list,router)\r\n                const action = getActions.permissionChange(permissionList)\r\n                dispatch(action)\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n\r\n","export const BOOK_LIST_GET = 'bookListGet'\r\nexport const BOOK_LIST_DELETE = 'bookListDelete'\r\nexport const CHANGE_LOGIN = 'changeLogin'\r\nexport const CHANGE_DROP = 'changeDrop'\r\nexport const AUTH_CHANGE = 'auth_change'\r\nexport const PERMISSION_CHANGE = 'permission_change'\r\nexport const CURRENT_CHANGE = 'current_change'","import { handleActions } from 'redux-actions'\r\nimport {BOOK_LIST_GET,BOOK_LIST_DELETE,CHANGE_LOGIN,CHANGE_DROP,PERMISSION_CHANGE} from './actionTypes'\r\nconst defaultState = {\r\n    list: [1, 2, 3],\r\n    bookList:[{\r\n        id: '1',\r\n        title: '111',\r\n        description: '111'\r\n    }],\r\n    inputValue:'a',\r\n    loginVisible:false,\r\n    dropVisilve:false,\r\n    permissionList:[]\r\n};\r\n\r\nconst reducer = handleActions({\r\n    [BOOK_LIST_GET]:(state,action)=>{\r\n        return {\r\n            ...state,\r\n            bookList:action.payload\r\n        }\r\n    },\r\n    [BOOK_LIST_DELETE]:(state,action)=>{\r\n        return {\r\n            ...state,\r\n            bookList:state.bookList.filter(item=>item.id !== action.payload.id)\r\n        }\r\n    },\r\n    [CHANGE_LOGIN]:(state,action)=>{\r\n        return {\r\n            ...state,\r\n            loginVisible:action.payload.flag\r\n        }\r\n    },\r\n    [CHANGE_DROP]:(state,action)=>{\r\n        return {\r\n            ...state,\r\n            dropVisilve:action.payload.flag\r\n        }\r\n    },\r\n    [PERMISSION_CHANGE]:(state, action)=> {\r\n        const newState = JSON.parse(JSON.stringify(state))\r\n        newState.permissionList = action.payload.permissionList\r\n        // newState.currentList = action.payload.currentList\r\n        // newState.avatar = action.payload.avatar\r\n        // newState.name = action.payload.name\r\n        return newState;\r\n    },\r\n},defaultState)\r\n\r\nexport default reducer\r\n\r\n\r\n// export default (state = defaultState, action) => {\r\n//     if(action.type=== \"input_value_change\"){\r\n//         const newState = JSON.parse(JSON.stringify(state))\r\n//         newState.inputValue = action.value\r\n//         return newState\r\n//     }\r\n//     return state;\r\n// }","import { createStore,applyMiddleware ,compose} from 'redux';\nimport thunk from 'redux-thunk';\nimport reducer from './reducer';\n\nconst composeEnhancers =window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?   window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) : compose;\nconst enhancer = composeEnhancers(\n  applyMiddleware(thunk)\n);\n\nconst store = createStore(reducer, enhancer);\nexport default store;","import axios from 'axios'\r\nimport baseURL from './baseUrl'\r\nimport { getLocal } from './tools'\r\nimport {message} from 'antd'\r\nimport { getActions } from '@/store/actions'\r\nimport store from '@/store'\r\n//创建axios实例\r\nconst service = axios.create({\r\n    baseURL: baseURL, // api的base_url\r\n    timeout: 200000, // 请求超时时间\r\n    withCredentials: true // 选项表明了是否是跨域请求\r\n})\r\n\r\n//请求拦截\r\nservice.interceptors.request.use(config => {\r\n    // 请求头添加token\r\n    if (getLocal('token')) {\r\n        config.headers.Authorization = `Bearer ${getLocal('token')}`\r\n    }\r\n    const flag = (config.data && config.data.loading !==false) || (config.params && config.params.loading !== false)\r\n    if(flag || true){\r\n        let loading\r\n        loading = document.getElementById('ajaxLoading')\r\n        loading.style.display = 'block'\r\n    }\r\n    return config;\r\n}, err => {\r\n    console.log('请求失败')\r\n    document.getElementById('ajaxLoading').style.display = 'none'\r\n    return Promise.reject(err)\r\n})\r\n\r\n//响应截器\r\nservice.interceptors.response.use(\r\n    response => {\r\n        document.getElementById('ajaxLoading').style.display = 'none'\r\n        const res = response.data\r\n        if (res.code !== 0) {\r\n            message.error(res.msg || '网络错误')\r\n            return Promise.reject('error')\r\n        } else {\r\n            return res\r\n        }\r\n    },\r\n    error => {\r\n        document.getElementById('ajaxLoading').style.display = 'none'\r\n        const { status } = error.response\r\n        switch (status) {\r\n            case 401:\r\n                localStorage.removeItem('token')\r\n                localStorage.removeItem('authed')\r\n                localStorage.removeItem('username')\r\n                localStorage.removeItem('userid')\r\n                localStorage.removeItem('department')\r\n                // window.location.reload()\r\n                message.error('请先登录')\r\n                let dropAction = getActions.changeDrop(false)\r\n                store.dispatch(dropAction)\r\n                let action = getActions.changeLogin(true)\r\n                store.dispatch(action)\r\n                \r\n                break;\r\n            case 500:\r\n                message.error(error.message)\r\n                break;\r\n            case 504:\r\n                message.error(error.message)\r\n                break;\r\n            default:\r\n                message.error(error.message)\r\n                break;\r\n        }\r\n        return Promise.reject(error)\r\n    }\r\n)\r\nexport default service","import request from '@/utils/request'\r\nlet url = process.env.NODE_ENV === 'development' ? '/sysinfo' :''\r\nconst axios = {\r\n    //获取参数列表\r\n    async getSystemInfo(params={}) {\r\n        const result = await request({\r\n            url:`${url}?api=1`,\r\n            method:'get',\r\n            params\r\n        })\r\n        return result\r\n    },\r\n    async postSystemInfo(field,data={}) {\r\n        const result = await request({\r\n            url:`${url}?api=1&field=${field}`,\r\n            method:'post',\r\n            data\r\n        })\r\n        return result\r\n    },\r\n    //发布需求\r\n    async publish(data) {\r\n        const result = await request({\r\n            url:'/v1/demand',\r\n            method:'post',\r\n            data\r\n        })\r\n        return result\r\n    }\r\n}\r\n\r\nexport default axios","import React, { Component } from 'react';\r\nimport { Area  } from '@ant-design/charts';\r\nimport { DatePicker,Select,Form } from 'antd';\r\nimport './index.less'\r\nimport moment from 'moment'\r\nconst { Option } = Select\r\nconst { RangePicker } = DatePicker;\r\nclass Page extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            list:[],\r\n            label:''\r\n        }\r\n        this.noUpdate = {\r\n            list:[]\r\n        }\r\n    }\r\n    change = (date, dateString) =>{\r\n        if(dateString.length === 0){return}\r\n        this.props.getOneList(this.props.status.name,dateString)\r\n    }\r\n    handleChange = value => {\r\n        let data = this.setTime(value)\r\n        this.props.getOneList(this.props.status.name,data)\r\n    }\r\n    setTime = (value)=>{\r\n        let dateFormat = 'YYYY/MM/DD HH:mm:ss'\r\n        const now = (new Date()).getTime()\r\n        const before = now - value*3600*1000\r\n        const nowTime = moment(now).format(dateFormat)\r\n        const beforeTime = moment(before).format(dateFormat)\r\n        this.refs.form.setFieldsValue({\r\n            time: [moment(beforeTime,dateFormat),moment(nowTime,dateFormat)]\r\n        })\r\n        return [beforeTime,nowTime]\r\n    }\r\n    componentDidMount(){\r\n        this.setTime(1)\r\n    }\r\n    shouldComponentUpdate(nextProps,nextState){\r\n        if(this.noUpdate.list.length === nextProps.list.length){\r\n            return false\r\n        }\r\n        this.noUpdate.list = nextProps.list\r\n        return true\r\n    }\r\n    render() {\r\n        let rate = this.props.hasRate ? '%': ''\r\n        const config = {\r\n            showTitle:true,\r\n            data:this.props.list,\r\n            height: 300,\r\n            xField: 't',\r\n            yField: 'v',\r\n            seriesField: 'n',\r\n            // slider: {\r\n            //     start: 0,\r\n            //     end: 1,\r\n            // },\r\n            point: {\r\n              size: 0.05,\r\n              shape: 'diamond',\r\n            },\r\n            // isPercent: true,\r\n            appendPadding: 1,\r\n            yAxis: {\r\n                label: {\r\n                  formatter: function formatter(value) {\r\n                    return value + rate;\r\n                  },\r\n                },\r\n              },\r\n            xAxis: {\r\n                tickCount: 10,\r\n            },\r\n            legend: {\r\n                visible: true,\r\n                // position: 'top',\r\n            },\r\n            responsive: true,\r\n            renderer:'svg'\r\n        };\r\n        return (\r\n            <div className=\"charts\">\r\n                <h1 className=\"title\">\r\n                    <span>{this.props.status.title}</span>\r\n                    <Form ref=\"form\" \r\n                        layout='inline'\r\n                    >\r\n                        <Form.Item>\r\n                            <Select defaultValue={1}  onChange={this.handleChange}>\r\n                                <Option value={1}>1小时</Option>\r\n                                <Option value={6}>6小时</Option>\r\n                                <Option value={24}>1天</Option>\r\n                                <Option value={168}>7天</Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"time\">\r\n                            <RangePicker\r\n                             onChange={this.change} \r\n                             className=\"picker\" \r\n                             showTime={{ format: 'HH:mm:ss' }}\r\n                             format=\"YYYY/MM/DD HH:mm:ss\"\r\n                             placeholder={['开始时间','结束时间']} />\r\n                         </Form.Item>\r\n                     </Form>\r\n                </h1>\r\n                <Area {...config} />\r\n            </div>\r\n        ) \r\n    }\r\n}   \r\nexport default Page;","import React from 'react'\r\nimport './index.less'\r\nimport request from '@/services'\r\nimport Charts from '@/components/Charts'\r\nimport { Modal, Button, Descriptions } from 'antd'\r\nclass Index extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            visible:true,\r\n            data:{\r\n                cpu:[],\r\n                disk:[],\r\n                goruntime:[],\r\n                memory:[],\r\n                network:[],\r\n                systemInfo:[],\r\n                io:[]\r\n            },\r\n            status:{\r\n                cpu:{\r\n                    name:'cpu',\r\n                    title:'CPU运行状态'\r\n                },\r\n                disk:{\r\n                    name:'disk',\r\n                    title:'硬盘运行状态'\r\n                },\r\n                goruntime:{\r\n                    name:'goruntime',\r\n                    title:'GO运行状态'\r\n                },\r\n                memory:{\r\n                    name:'memory',\r\n                    title:'内存运行状态'\r\n                },\r\n                network:{\r\n                    name:'network',\r\n                    title:'网络运行状态'\r\n                },\r\n                io:{\r\n                    name:'io',\r\n                    title:'IO运行状态'\r\n                },\r\n            }\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.getData()\r\n    }\r\n    getData = async ()=>{\r\n        const params = {\r\n            field:'cpu,disk,goruntime,memory,network,io,systeminfo'\r\n        }\r\n        const res = await request.getSystemInfo(params)\r\n        if(res.code === 0){\r\n            this.setState({\r\n                data:res.data\r\n            })\r\n        }\r\n    }\r\n    // getAllCharts = ()=>{\r\n    //     return Object.values(this.state.data).map((item,key)=>{\r\n    //         if(key === 5){return ''}\r\n    //         return <Charts key={key} list={item} />\r\n    //     })\r\n    // }\r\n    getOneList= async (type,data)=>{\r\n        const obj = {\r\n            startdate:data[0],\r\n            enddate:data[1]\r\n        }\r\n        const res = await request.postSystemInfo(type,obj)\r\n        if(res.code === 0){\r\n            let newData = Object.assign({}, this.state.data, { [type]: res.data[type] })\r\n            this.setState({\r\n                data:newData\r\n            })\r\n        }\r\n        \r\n    }\r\n    render() {\r\n        return (\r\n            <div className=''>\r\n                <Modal\r\n                    title=\"系统信息\"\r\n                    centered\r\n                    visible={this.props.visible}\r\n                    onOk={() => this.props.changeVisible()}\r\n                    onCancel={() => this.props.changeVisible()}\r\n                    width={1200}\r\n                    okText='确定'\r\n                    cancelText='取消'\r\n                >\r\n                    <Descriptions  className='info' bordered >\r\n                        {this.state.data.systemInfo.map((item,key)=>{\r\n                            return <Descriptions.Item  key={key} label={item[0]}><div className=\"contentBox\">{item[1]}</div></Descriptions.Item>\r\n                        })}\r\n                    </Descriptions>\r\n                </Modal>\r\n\r\n                <Charts getOneList={this.getOneList} hasRate status={this.state.status.cpu} list={this.state.data.cpu} />\r\n                <Charts getOneList={this.getOneList} hasRate status={this.state.status.memory} list={this.state.data.memory} />\r\n                <Charts getOneList={this.getOneList} hasRate status={this.state.status.disk} list={this.state.data.disk} />\r\n                <Charts getOneList={this.getOneList} status={this.state.status.network} list={this.state.data.network} />\r\n                <Charts getOneList={this.getOneList} status={this.state.status.goruntime} list={this.state.data.goruntime} />\r\n                <Charts getOneList={this.getOneList}  status={this.state.status.io} list={this.state.data.io} />\r\n                \r\n                \r\n                {/* {this.getAllCharts()} */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Index","import React from 'react'\r\nimport './index.less'\r\nimport request from '@/services'\r\nimport { Descriptions, Badge } from 'antd'\r\n\r\nclass Index extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      list: []\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    this.getData()\r\n  }\r\n  getData = async () => {\r\n    const params = {\r\n      field: 'systeminfo'\r\n    }\r\n    const res = await request.getSystemInfo(params)\r\n    if (res.code === 0) {\r\n      this.setState({\r\n        list: res.data.systemInfo\r\n      })\r\n    }\r\n  }\r\n  render () {\r\n    return (\r\n      <div className='info'>\r\n        {/* {this.state.list.map((item,key) =>{\r\n              return (<Card key={key}>\r\n              <Card.Grid  style={gridStyle}>{item[0]}</Card.Grid>\r\n              <Card.Grid  style={gridStyle1}>{item[1]}</Card.Grid>\r\n            </Card>)\r\n          })} */}\r\n        <Descriptions bordered >\r\n            {this.state.list.map((item,key)=>{\r\n                return <Descriptions.Item  key={key} label={item[0]}><div className=\"contentBox\">{item[1]}</div></Descriptions.Item>\r\n            })}\r\n        </Descriptions>\r\n        {/* <Descriptions title='User Info' bordered>\r\n          <Descriptions.Item label='Product'>Cloud Database</Descriptions.Item>\r\n          <Descriptions.Item label='Billing Mode'>Prepaid</Descriptions.Item>\r\n          <Descriptions.Item label='Automatic Renewal'>YES</Descriptions.Item>\r\n          <Descriptions.Item label='Order time'>\r\n            2018-04-24 18:00:00\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label='Usage Time' span={2}>\r\n            2019-04-24 18:00:00\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label='Status' span={3}>\r\n            <Badge status='processing' text='Running' />\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label='Negotiated Amount'>\r\n            $80.00\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label='Discount'>$20.00</Descriptions.Item>\r\n          <Descriptions.Item label='Official Receipts'>\r\n            $60.00\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label='Config Info'>\r\n            Data disk type: MongoDB\r\n            <br />\r\n            Database version: 3.4\r\n            <br />\r\n            Package: dds.mongo.mid\r\n            <br />\r\n            Storage space: 10 GB\r\n            <br />\r\n            Replication factor: 3\r\n            <br />\r\n            Region: East China 1<br />\r\n          </Descriptions.Item>\r\n        </Descriptions> */}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Index\r\n","import React from 'react'\r\nimport KeepAlive from 'react-activation'\r\nimport { connect } from 'react-redux'\r\nfunction withAliveComponent (Component) {\r\n  const wrapAliveComponent = function (props) {\r\n    return (\r\n      <KeepAlive  when={true}>\r\n        <Component />\r\n      </KeepAlive>\r\n    )\r\n  }\r\n\r\n  \r\n  return wrapAliveComponent\r\n}\r\n\r\nexport default withAliveComponent\r\n","import * as React from \"react\"\r\nimport { Component } from \"react\"\r\nimport \"./index.less\"\r\nimport { Route, Link,withRouter   } from 'react-router-dom';\r\nimport { Layout, Menu, PageHeader,Button } from \"antd\";\r\nimport {\r\n    DashboardOutlined,\r\n    SettingOutlined,\r\n    DatabaseOutlined,\r\n    ApiOutlined,\r\n    MonitorOutlined\r\n} from '@ant-design/icons';\r\nimport DashBoard from \"@/pages/DashBoard\";\r\nimport SystemInfo from '@/pages/SystemInfo'\r\nimport withAliveComponent from '@/utils/withAliveComponent'\r\n// import DataBase from \"../pages/systemSettings/database\";\r\n// import SysSettings from \"../pages/systemSettings/sysSettings\";\r\n// import ApiDashboard from \"../pages/apidisplay\";\r\n// import { LogMonitor } from \"../pages/logMonitor\";\r\n\r\n\r\n\r\nconst { Header, Content, Footer, Sider } = Layout;\r\nconst { SubMenu } = Menu\r\n\r\n\r\nclass MainLayout extends Component{\r\n    constructor(prop) {\r\n        super(prop);\r\n        this.state = {\r\n            visible:false,\r\n            CurrentMenuSelectKey: this.props.location.pathname==='/'?\"/index\":this.props.location.pathname\r\n        };\r\n    }\r\n    changeVisible= ()=>{\r\n        this.setState({visible:false})\r\n    }\r\n    GetCurrentPageHeaderTitle = () => {\r\n        return \"系统状态\"\r\n        switch (this.state.CurrentMenuSelectKey) {\r\n            case \"/index\":\r\n                return \"系统状态\"\r\n            case \"/systeminfo\":\r\n                return \"系统信息\"\r\n            // case \"dataBase\":\r\n            //     return \"数据管理\"\r\n            // case \"systemSettings\":\r\n            //     return \"设置\";\r\n            // case \"apidashboard\":\r\n            //     return \"API展示\";\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    GetCurrentPageHeaderSubTitle = () => {\r\n        return \"您可以在这个页面看到整个系统的概要情况\";\r\n        switch (this.state.CurrentMenuSelectKey) {\r\n            case \"/index\":\r\n                return \"您可以在这个页面看到整个系统的概要情况\";\r\n            case \"/systeminfo\":\r\n                return \"您可以在这个页面看到整个系统的基本信息\";\r\n            // case \"dataBase\":\r\n            //     return \"在这个页面点击不同的KeyTag能够进行查看与编辑\";\r\n            // case \"systemSettings\":\r\n            //     return \"这个页面可以临时改变当前系统的配置\";\r\n            // case \"apidashboard\":\r\n            //     return \"在这个页面您可以管理当前设备的API信息\";\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    GetButton = () => {\r\n        return [<Button key=\"1\" size=\"large\" shape=\"round\" onClick={()=>{this.setState({visible:true})}}  type=\"primary\">查看系统信息</Button>];\r\n        switch (this.state.CurrentMenuSelectKey) {\r\n            case \"/index\":\r\n                return [<Button key=\"1\" size=\"large\" shape=\"round\" onClick={()=>{this.setState({visible:true})}}  type=\"primary\">查看系统信息</Button>];\r\n                // return [<Button key=\"1\" size=\"large\" shape=\"round\" onClick={()=>{this.setState({CurrentMenuSelectKey:'/systeminfo'})}}  type=\"primary\"><Link to=\"/systeminfo\">查看系统信息</Link></Button>];\r\n            case \"/systeminfo\":\r\n                return [<Button key=\"2\" size=\"large\" shape=\"round\" onClick={()=>{this.setState({CurrentMenuSelectKey:'/index'})}}   type=\"primary\"><Link to=\"/\">查看系统状态</Link></Button>];\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    render() {\r\n        return <Layout>\r\n            {/* <Sider className=\"sider\" >\r\n                <div className=\"logo\" />\r\n                <Menu theme=\"light\" mode=\"inline\" selectedKeys={this.state.CurrentMenuSelectKey} onSelect={(param) => { this.setState({ CurrentMenuSelectKey: param.key }) }}>\r\n                    <Menu.Item key=\"/index\" icon={<DashboardOutlined />}>\r\n                        <Link to=\"/\">系统概要</Link>\r\n                        <Link to=\"/\">系统状态</Link>\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"/systeminfo\" icon={<ApiOutlined />}>\r\n                        <Link to=\"/systeminfo\">系统信息</Link>\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"apidashboard\" icon={<ApiOutlined />}>\r\n                        <Link to=\"/apidashboard\">API展示</Link>\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"logMonitor\" icon={<MonitorOutlined />}>\r\n                        <Link to=\"/logmonitor\">日志监控</Link>\r\n                    </Menu.Item>\r\n                    <SubMenu key=\"settings\" icon={<SettingOutlined />} title=\"系统配置\">\r\n                        <Menu.Item key=\"systemSettings\" icon={<SettingOutlined />}>\r\n                            <Link to=\"/systemSettings\">设置</Link>\r\n                        </Menu.Item>\r\n                        <Menu.Item key=\"dataBase\" icon={<DatabaseOutlined />}>\r\n                            <Link to=\"/dataBase\">数据管理</Link>\r\n                        </Menu.Item>\r\n                    </SubMenu>\r\n                </Menu>\r\n            </Sider> */}\r\n            <Layout className=\"site-layout\" >\r\n                <Header className=\"site-header\"  >\r\n                    <PageHeader\r\n                        backIcon={false}\r\n                        title={this.GetCurrentPageHeaderTitle()}\r\n                        subTitle={this.GetCurrentPageHeaderSubTitle()}\r\n                        extra={this.GetButton()}\r\n                    />\r\n                </Header>\r\n                <Content className=\"content\"  >\r\n                    <DashBoard changeVisible={this.changeVisible} visible={this.state.visible} />\r\n                    {/* <Route exact  path=\"/\" component={DashBoard} />\r\n                    <Route exact path=\"/systeminfo\" component={SystemInfo} /> */}\r\n                    {/* <Route exact path=\"/dataBase\" component={DataBase} />\r\n                    <Route exact path=\"/systemSettings\" component={SysSettings} />\r\n                    <Route exact path=\"/apidashboard\" component={ApiDashboard} />\r\n                    <Route exact path=\"/logmonitor\" component={LogMonitor} /> */}\r\n                </Content>\r\n                <Footer style={{ textAlign: 'center' }}>Nova ©2020 Created by BenLampson</Footer>\r\n            </Layout>\r\n        </Layout>\r\n    }\r\n}\r\n\r\nexport default withRouter(MainLayout)","import React from 'react';\nimport Layout from '@/pages/layout'\nimport {BrowserRouter, Route} from 'react-router-dom'\nimport { AliveScope } from 'react-activation'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout />\n    </div>\n  );\n}\n\nconst Root = () => {\n  return (\n    <AliveScope>\n      <BrowserRouter basename='/'>\n          <Route path={`/`} component={App}></Route>\n      </BrowserRouter>\n    </AliveScope>\n  )\n\n}\n\nexport default Root;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './stylus/index.less'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store'\nimport { Provider } from 'react-redux'\n\nconst Main = () => {\n\treturn (\n\t\t<Provider store={store}>\n\t\t\t<App />\n\t\t</Provider>\n\t)\n}\n\nReactDOM.render(\n\t<Main />,\n\tdocument.getElementById('root')\n);\n\nif (module.hot) {\n\tmodule.hot.accept();\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}